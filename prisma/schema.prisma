generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// Auth.js models
// ========================================

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  role   UserRole   @default(STUDENT)
  status UserStatus @default(ATIVO)

  // Relacionamentos SaaS
  classrooms        Classroom[]  @relation("TeacherClassrooms")
  enrollments       Enrollment[]
  paymentsAsStudent Payment[]    @relation("StudentPayments")
  paymentsAsTeacher Payment[]    @relation("TeacherPayments")
  materials         Material[]
  forumTopics       ForumTopic[] @relation("UserForumTopics")
  forumPosts        ForumPost[]  @relation("UserForumPosts")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// ========================================
// SaaS ClasseLivre models
// ========================================

model Classroom {
  id          String     @id @default(cuid())
  title       String
  description String?
  date        DateTime
  type        LessonType

  teacher   User   @relation("TeacherClassrooms", fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String

  enrollments Enrollment[]
  materials   Material[]
  forumTopics ForumTopic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id     String           @id @default(cuid())
  status EnrollmentStatus @default(ATIVO)

  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String

  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id          String        @id @default(cuid())
  amount      Int           // valor em centavos
  dueDate     DateTime
  status      PaymentStatus @default(PENDENTE)

  student     User          @relation("StudentPayments", fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String

  teacher     User          @relation("TeacherPayments", fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId   String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Material {
  id    String @id @default(cuid())
  title String
  url   String

  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String

  teacher   User   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ForumTopic {
  id    String @id @default(cuid())
  title String

  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String

  createdBy   User   @relation("UserForumTopics", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  posts ForumPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ForumPost {
  id      String @id @default(cuid())
  content String

  topic   ForumTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId String

  author   User   @relation("UserForumPosts", fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ========================================
// Enums (definidos apenas uma vez cada)
// ========================================

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

enum UserStatus {
  ATIVO
  INATIVO
  BANIDO
}

enum LessonType {
  ONLINE
  PRESENCIAL
}

enum EnrollmentStatus {
  ATIVO
  TRANCADO
  CONCLUIDO
  INATIVO
}

enum PaymentStatus {
  PENDENTE
  PAGO
  ATRASADO
}
